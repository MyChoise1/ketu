// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AddressType {
  HOME
  OFFICE
  OTHER

  @@map("address_type")
}

enum UserType {
  ADMIN
  USER

  @@map("user_type")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED

  @@map("order_status")
}

enum PaymentStatus {
  PENDING
  PAID

  @@map("payment_status")
}

model User {
  username String
  id       String @id @default(cuid())
  email    String @unique
  password String

  Address Address[]
  Review  Review[]
  Order  Order[]


  @@map("users")

  type UserType @default(USER)
}

model Products {
  id   String @id @default(cuid())
  name String
  slug String @unique

  mrp        Float
  sell_price Float

  images Json

  sku String

  stock Int

  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  Review Review[]
  OrderItem OrderItem[]

  @@index([slug])
  @@map("products")
}

// model Cart {
//   id String @id @default(cuid())

//   userId String @unique
//   user   User   @relation(fields: [userId], references: [id])

//   total Float

//   CartItem CartItem[]

//   @@map("cart")
// }

// model CartItem {
//   id Int @id @default(autoincrement())

//   cartId String
//   cart   Cart   @relation(fields: [cartId], references: [id])

//   productId String
//   product   Products @relation(fields: [productId], references: [id])

//   quantity Int

//   total Float

//   @@map("cart_items")
// }

// model WishList {
//   id String @id @default(cuid())

//   userId String @unique
//   user   User   @relation(fields: [userId], references: [id])

//   productId String
//   product   Products @relation(fields: [productId], references: [id])

//   total Float

//   @@map("wish_list")
// }

model Address {
  id        Int         @id @default(autoincrement())
  userId    String
  user      User        @relation(fields: [userId], references: [id])

  first_name String
  last_name String
  phone     String

  address   String
  city      String
  state     String
  country   String
  zip       String
  type      AddressType @default(HOME)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("address")
}

model Review {
  id        Int      @id @default(autoincrement())
  productId String   @map("product_id")
  product   Products @relation(fields: [productId], references: [id])
  reviewerName String

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  rating    Int
  review    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reviews")
}

model OrderItem {
  id String @id @default(cuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product   Products @relation(fields: [productId], references: [id])

  quantity Int

  total Float

  @@map("order_items")
}

model Order {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  orderStatus   OrderStatus   @default(PENDING) @map("order_status")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")

  total Float

  orderItems OrderItem[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@map("orders")
}